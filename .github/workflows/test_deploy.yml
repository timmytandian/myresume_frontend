name: frontend CI/CD
run-name: ACTOR ${{ github.actor }} - BRANCH ${{ github.ref_name }} - EVENT ${{ github.event_name }}
on: [workflow_dispatch, push]
jobs:
  Test-and-Build:
    runs-on: ubuntu-latest
    
    steps:
      #----------------------------------------------
      #  check-out repo and preview the path
      #----------------------------------------------
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run pwd and ls
        run: |
          pwd
          ls
      #----------------------------------------------
      #  initialize variable
      #----------------------------------------------
      - name: Set variable value
        id: set_PROJECT_NAME
        run: |
          echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"
      - name: Use variable value
        id: get_PROJECT_NAME
        run: |
          printf 'the project name is: %s\n' "$PROJECT_NAME"
      #----------------------------------------------
      #  Setup Node.js
      #----------------------------------------------
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.6.2'
      #----------------------------------------------
      #  Cache Node modules
      #----------------------------------------------
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      #----------------------------------------------
      # List sate of Node modules if cache misses
      #----------------------------------------------
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list
      #----------------------------------------------
      # Install dependencies
      #----------------------------------------------
      - name: Install dependencies
        run: npm ci
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests on the JavaScript
        run: npm run test
    
      - name: Run tests on the HTML
        run: gulp
      
      #----------------------------------------------
      # Upload web resources as artifact
      #----------------------------------------------
      - name: Upload web resources as artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-web-resources
          path: |
            src/css/
            src/js/
            src/images/
            src/index.html

      - run: echo "üçè This job's status is ${{ job.status }}."
  
  DeployWithTerraform:
    runs-on: ubuntu-latest
    needs: Test-and-Build
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: terraform/
    steps:
      #----------------------------------------------
      #  Initial setup and Terraform format check
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false
          
      - name: Terraform Format
        id: tf_fmt
        run: terraform fmt -check

      #----------------------------------------------
      #  Terraform Init
      #----------------------------------------------
      - name: tf init
        id: tf_init
        run: |
          if [ -d "environments/${{ github.ref_name }}/" ]; then
            cd environments/${{ github.ref_name }}
            terraform init
          else
            for dir in environments/*/
            do 
              cd ${dir}   
              env=${dir%*/}
              env=${env#*/}
              echo ""
              echo "*************** TERRAFORM INIT ******************"
              echo "***** Running terraform init at environment: ${env} *****"
              echo "*************************************************"
              terraform init || exit 1
              cd ../../
            done
          fi

      #----------------------------------------------
      #  Terraform Plan
      #----------------------------------------------
      - name: Terraform Validate
        id: tf_validate
        run: terraform validate -no-color

      - name: tf plan
        id: tf_plan
        run: |
          if [ -d "environments/${{ github.ref_name }}/" ]; then
            cd environments/${{ github.ref_name }}
            terraform init
          else
            for dir in environments/*/
            do 
              cd ${dir}   
              env=${dir%*/}
              env=${env#*/}
              echo ""
              echo "*************** TERRAFORM INIT ******************"
              echo "***** Running terraform init at environment: ${env} *****"
              echo "*************************************************"
              terraform init || exit 1
              cd ../../
            done
          fi

      #----------------------------------------------
      #  Github script to to post issue in PR window
      #----------------------------------------------
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.tf_plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.tf_fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.tf_init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.tf_validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.tf_validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.tf_plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, BRANCH: \`${{ github.ref_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      #----------------------------------------------
      #  Terraform Apply
      #----------------------------------------------
      - name: Terraform Apply
        id: tf_apply
        run: |
          if [ -d "environments/${{ github.ref_name }}/" ]; then
            cd environments/${{ github.ref_name }}
            terraform apply -auto-approve
          else
            echo "***************************** SKIPPING APPLYING *******************************"
            echo "Branch '${{ github.ref_name }}' does not represent an oficial environment." Skip the deployment.
            echo "*******************************************************************************"
          fi
      
  DeployCodeToS3:
    if: github.repository == 'timmytandian/remove-me-to-execute-this-job'
    runs-on: ubuntu-latest
    needs: Test-and-Build
    steps:
      #----------------------------------------------
      #  Artifact download, publish to AWS S3
      #----------------------------------------------
      - name: Download the static web artifact
        uses: actions/download-artifact@v4
        with:
          name: static-web-resources
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Upload web resources to S3
        run: |
          aws s3 sync . s3://${{ vars.S3_BUCKET }} --delete
      - name: Job status report
        run: echo "üçè This job's status is ${{ job.status }}."